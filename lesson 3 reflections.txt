Reflections 3
1)
Topic:  When would you want to use a remote repository rather than keeping all your work local?
Duh 0:  Lesson says that if I am working from another computer that does not have the local repository set up, 
I may make an update directly on a remote.

2)
Topic:  Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?
Duh 0:  If you work with other people on a same file or set of files that are dependent on them,
automatic update might overwrite my changes before I am done.  Also, if I have checked out previous
commits, automatic update would break the commits, I'm not sure, but I will probably learn more about this type of scenarios.

3)
Topic:  Describe the differences between forks, clones, and branches. When would you use one instead of another?
Duh 0: Forks are GitHub tool that makes a clone of another repository on the GitHub server.
Clones are a copy of repository that can exist locally or one on GitHub and one on local machine.
Branches are created from the master which can have changes in itself without affecting the master branch for separatly 
experimenting bigger changes and new features.  You have to switch to a particular branch on local to work on it by "git checkout
 <<branch name here...>>.  In order to add the changes in branch, you merge into master, and resolve all conflicts.

4)
Topic:  What is the benefit of having a copy of the last known state of the remote stored locally?
Duh 0: Not sure if I understand such situation very well, but one case that I've seen in the last exercise where
collaborator pushes a change and that push does so called 'Fast forward merge', my change's ancestor's history 
may move ahead of my local.  By storing remote locally, I will always be able to keep the original history until
I know it's okay to merge.

5)
Topic:  How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Duh 0: We would both checkout the 'base' code and exchange modified versions of the code via email and monitor sharing tool 
to share and agree upon the changes. Then, one collaborator will check in the code.
It's easier old fashioned way of collaboration.  Hard part is that someone has to track the history of the changes, and
sometimes collaborators will have to meet at the same time although not always.
