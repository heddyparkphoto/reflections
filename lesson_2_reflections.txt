Reflectioins 2

1)
Topic:  What happens when you initialize a repository? Why do you need to do it?
Duh 0:  A .git directory was created.  I think I need it to control my changes through Git version-control repository.

2)
Topic: How is the staging area different from the working directory and the repository? What value do you think it offers?
Duh 0:  It is different from the working directory because I cannot directly write to it, instead "git add <file name>"
auto add it to it.  It is different from the repository because it holds changes made to files where the repository 
has previously committed versions without the changes yet.

3)
Topic: How can you use the staging area to make sure you have one commit per logical change?
Duh 0:  Keep adding all files that belong to one logical change to the staging area and commit them with one single commit unit.

4)
Topic:  What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Duh 0: Not sure yet, but as stated in the lesson, having a separately labeled branch where you can keep all files that you experiment
with different behaviors until you are ready to merge with the master branch would be efficient.

5)
Topic: How do the diagrams help you visualize the branch structure?
Duh 0:  It's a good reference alongside the output of the git log.  You can also track down which commit might be 'unreacheable' due to how git log works.

6)
Topic: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Duh 0:  Changes in both branches were brought in and worked successfully. Also both files became the parents of the merged version,
and the history of both branches became the history of the new merged version.  The diagram represents 2 branches before the last shared 
parent and the merged version as one branch, but the rest as separate branches because they can ba tracked back through the merged
version.

